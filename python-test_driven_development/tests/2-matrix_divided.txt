>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided(None, 3)  # Invalid matrix
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[]], 3)  # Empty matrix
[[]]
>>> matrix_divided("not a matrix", 3)  # String instead of matrix
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = [  # Regular matrix
...	[1, 2, 3],
...	[4, 5, 6]
...	]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix_divided(matrix, 0)  # Division by zero
Traceback (most recent call last):
...
ZeroDivisionError: division by zero
>>> matrix_divided(matrix, "str")  # Division by a str (wrong type)
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided(matrix, float('inf')) # Infinity
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
>>> matrix_divided(matrix, float('-inf')) # Infinity
[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]
>>> matrix_divided(matrix, float('nan'))
[[nan, nan, nan], [nan, nan, nan]]
>>> matrix = [  # Matrix size issue
...     [1, 2, 3],
...     [4, 5]
...     ]
>>> matrix_divided(matrix, 2) 
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix = [  # Matrix with type issue in a row
...    [1, 2, 3],
...    ["str", 5, 6]
...     ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = [1, 5]  # Not a matrix
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = ["str", 5]  # Not a matrix with error type
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
